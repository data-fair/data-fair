# nginx configuration file for Data Fair development and test environment

# nginx cache definition
proxy_cache_path /var/cache/nginx/data-fair levels=1:2 keys_zone=data-fair-cache:10m inactive=10d max_size=10g;
# this is necessary for host based routing where different hosts serve different content on the same path
proxy_cache_key $scheme$host$request_uri;

server {
  listen 5600;
  server_name _;

  # Transmit host, protocol and user ip, we use it for routing, rate limiting, etc.
  proxy_set_header Host $http_host;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Client-IP $remote_addr;
  proxy_set_header X-Forwarded-Proto $scheme;
  # Headers we use for better private caching
  proxy_set_header X-Private-If-Modified-Since $http_if_modified_since;
  proxy_set_header X-Private-If-None-Match $http_if_none_match;
  proxy_pass_header "X-Accel-Buffering";
  # web socket support
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection "Upgrade";
  # range requests support
  proxy_set_header Range $http_range;
  # accept some occasional long queries
  proxy_read_timeout 600s;
  # body size limits are implemented by services themselves
  client_max_body_size 0;
  # direct streaming of uploads
  proxy_request_buffering off;
  # direct streaming of downloads, enabled on-demand by services using x-accel-buffering header
  proxy_buffering off;
  # allow large response headers (setCookies with large session token)
  proxy_buffer_size 32k;
  proxy_buffers 4 32k;

  # a simple cache respecting the cache-control headers
  proxy_cache data-fair-cache;
  proxy_cache_revalidate on;
  proxy_cache_lock on;
  proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
  proxy_cache_convert_head off;
  add_header X-Cache-Status $upstream_cache_status;
  proxy_cache_bypass $http_x_cache_bypass;
  proxy_cache_bypass $cookie_cache_bypass;
  
  # redirect root to /data-fair/
  location = / {  
    return 302 /data-fair/;
  }

  location /data-fair {
    rewrite  ^/data-fair/(.*) /$1 break;
    proxy_pass http://localhost:5599/;
  }

  location /simple-directory {
    rewrite  ^/simple-directory/(.*) /$1 break;
    proxy_pass http://localhost:8080/;
  }
  location /mails {
    rewrite  ^/mails/(.*) /$1 break;
    proxy_pass http://localhost:1080/;
  }

  location /api-doc {
    rewrite  ^/api-doc/(.*) /$1 break;
    proxy_pass http://localhost:5680/;
  }

  location /capture {
    rewrite  ^/capture/(.*) /$1 break;
    proxy_pass http://localhost:8087/;
  }

  location /notify {
    rewrite  ^/notify/(.*) /$1 break;
    proxy_pass http://localhost:8088/;
  }

  location /thumbor {
    rewrite  ^/thumbor/(.*) /$1 break;
    proxy_pass http://localhost:8000/;
  }
}

# secondary exposition to simulate a publication site
server {
  listen 5601;
  server_name _;

  # Transmit host, protocol and user ip, we use it for routing, rate limiting, etc.
  proxy_set_header Host $http_host;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Client-IP $remote_addr;
  proxy_set_header X-Forwarded-Proto $scheme;
  # Headers we use for better private caching
  proxy_set_header X-Private-If-Modified-Since $http_if_modified_since;
  proxy_set_header X-Private-If-None-Match $http_if_none_match;
  proxy_pass_header "X-Accel-Buffering";
  # web socket support
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection "Upgrade";
  # accept some occasional long queries
  proxy_read_timeout 600s;
  # body size limits are implemented by services themselves
  client_max_body_size 0;
  # direct streaming of uploads
  proxy_request_buffering off;
  # direct streaming of downloads, enabled on-demand by services using x-accel-buffering header
  proxy_buffering off;
  # allow large response headers (setCookies with large session token)
  proxy_buffer_size 32k;
  proxy_buffers 4 32k;

  # a simple cache respecting the cache-control headers
  proxy_cache data-fair-cache;
  proxy_cache_revalidate on;
  proxy_cache_lock on;
  proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
  proxy_cache_convert_head off;
  add_header X-Cache-Status $upstream_cache_status;
  proxy_cache_bypass $http_x_cache_bypass;
  proxy_cache_bypass $cookie_cache_bypass;
  
  # redirect root to /data-fair/
  location = / {  
    return 302 /data-fair/;
  }

  location /data-fair {
    rewrite  ^/data-fair/(.*) /$1 break;
    proxy_pass http://localhost:5599/;
  }

  location /simple-directory {
    rewrite  ^/simple-directory/(.*) /$1 break;
    proxy_pass http://localhost:8080/;
  }
  location /mails {
    rewrite  ^/mails/(.*) /$1 break;
    proxy_pass http://localhost:1080/;
  }

  location /api-doc {
    rewrite  ^/api-doc/(.*) /$1 break;
    proxy_pass http://localhost:5680/;
  }

  location /capture {
    rewrite  ^/capture/(.*) /$1 break;
    proxy_pass http://localhost:8087/;
  }

  location /notify {
    rewrite  ^/notify/(.*) /$1 break;
    proxy_pass http://localhost:8088/;
  }

  location /thumbor {
    rewrite  ^/thumbor/(.*) /$1 break;
    proxy_pass http://localhost:8000/;
  }
}