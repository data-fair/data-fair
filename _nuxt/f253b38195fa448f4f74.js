(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{140:function(e,s,n){},141:function(e,s,n){"use strict";var a=/[|\\{}()[\]^$+*?.]/g;e.exports=function(e){if("string"!=typeof e)throw new TypeError("Expected a string");return e.replace(a,"\\$&")}},142:function(e,s,n){},143:function(e,s,n){"use strict";var a=n(140);n.n(a).a},144:function(e,s,n){"use strict";n(65),n(26),n(31),n(45);var a=n(13),t=n.n(a),i=n(24),r=n(141);n(142);var o={props:["prefix","pages","page","content"],data:function(){return{ready:!1}},computed:t()({},Object(i.b)(["env"]),{filledContent:function(){return this.content.replace(new RegExp(r("<span>{{</span>publicUrl<span>}}</span>","g")),this.env.publicUrl)}}),mounted:function(){var e=this,s={h2:["display-1","my-4"],h3:["title","mb-4","mt-5"],h4:["subheading","mb-3","mt-4"],p:["body1"],table:["v-datatable","v-table","theme--light","elevation-1"],code:["theme--light"],"pre code":["v-card","pt-3","mb-4"]};Object.keys(s).forEach(function(n){e.$el.querySelectorAll(n).forEach(function(e){s[n].forEach(function(s){return e.classList.add(s)})})}),this.ready=!0}},l=(n(143),n(16)),p=Object(l.a)(o,function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("v-container",{staticClass:"doc-page",attrs:{fluid:""}},[n("v-navigation-drawer",{staticStyle:{"padding-top":"64px"},attrs:{app:"",fixed:""}},[n("v-subheader",[e._v(e._s(e.$t("pages."+e.prefix+".title")))]),e._v(" "),n("v-list",e._l(e.pages,function(s){return n("v-list-tile",{key:s,attrs:{to:e.localePath({name:e.prefix+"-id",params:{id:s}})}},[n("v-list-tile-title",[e._v(e._s(e.$t("pages."+e.prefix+"."+s+".title")))])],1)}),1)],1),e._v(" "),n("v-layout",{attrs:{column:""}},[n("h2",{staticClass:"display1 my-4"},[e._v(e._s(e.$t("pages."+e.prefix+"."+e.page+".title")))]),e._v(" "),n("v-flex",{directives:[{name:"show",rawName:"v-show",value:e.ready,expression:"ready"}],attrs:{xs12:""},domProps:{innerHTML:e._s(e.filledContent)}})],1)],1)},[],!1,null,null,null);p.options.__file="DocPage.vue";s.a=p.exports},165:function(e,s,n){var a={"./api-en.md":166,"./api-fr.md":167,"./applications-en.md":168,"./applications-fr.md":169,"./services-en.md":170,"./services-fr.md":171};function t(e){var s=i(e);return n(s)}function i(e){var s=a[e];if(!(s+1)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return s}t.keys=function(){return Object.keys(a)},t.resolve=i,e.exports=t,t.id=165},166:function(e,s){e.exports="<section><p>TODO</p>\n</section>\n"},167:function(e,s){e.exports='<section><p>Data FAIR expose un API HTTP complète. Une partie de cette API est essentiellement à destination des applications et autres réutilisations des jeux de données. Une autre partie concerne principalement les producteurs de contenu qui souhaitent automatiser leur processus. Dans cette page nous proposons un aperçu de quelques méthodes de publication de contenu. Les exemples ci-dessous ne montrent qu\'un échantillon des capacités de l\'API DataFair et ne remplacent pas la documentation interactive bien plus complète embarquée dans le service.</p>\n<h3>Pré-requis</h3>\n<ul>\n<li>Une installation opérationnelle de Data FAIR, soit locale, soit publique comme sur <a href="https://koumoul.com/s/data-fair">koumoul.com</a></li>\n<li>Un compte et une clé d\'API avec la portée &quot;Gestion des jeux de données&quot; (voir vos paramètres personnels ou d\'organisation dans le menu en haut à droite)</li>\n<li><a href="https://curl.haxx.se/">curl</a> ou autre client HTTP à condition d\'adapter les exemples</li>\n</ul>\n<p>Définissez une variable contenant votre clé d\'API :</p>\n<pre><code class="language-sh"><span class="hljs-built_in">export</span> API_KEY=<span class="hljs-string">"XXXX"</span>\n</code></pre>\n<p>Définissez une variable contenant l\'URL de base de votre instance DataFair :</p>\n<pre><code class="language-sh"><span class="hljs-built_in">export</span> DATAFAIR_URL=<span class="hljs-string">"https://koumoul.com/s/data-fair"</span>\n<span class="hljs-built_in">export</span> DATAFAIR_URL=<span class="hljs-string">"http://localhost/data-fair"</span>\n</code></pre>\n<h3>Jeu de données simple basé fichier</h3>\n<p>Téléchargez un fichier CSV d\'exemple :</p>\n<pre><code class="language-sh">curl https://raw.githubusercontent.com/koumoul-dev/data-fair/master/<span class="hljs-built_in">test</span>/resources/dataset1.csv -o dataset1.csv\n</code></pre>\n<p>Créez un jeu de données simple à partir de ce fichier avec une requête HTTP multipart :</p>\n<pre><code class="language-sh">curl -v --header <span class="hljs-string">"x-apiKey: <span class="hljs-variable">$API_KEY</span>"</span> --form file=@dataset1.csv <span class="hljs-variable">$DATAFAIR_URL</span>/api/v1/datasets\n</code></pre>\n<p>Notez dans le retour que le jeu de données créé s\'est vu attribué un identifiant &quot;id&quot; que vous pouvez conserver pour effectuer des opérations ultérieures sur ce jeu de données.</p>\n<pre><code class="language-sh"><span class="hljs-built_in">export</span> DATASET_ID=identifiant que vous venez de recevoir\n</code></pre>\n<p>L\'attribut &quot;status&quot; est à &quot;loaded&quot;. Notez que les traitements sur le jeu de données sont exécutés de manière asynchrone, quelques secondes plus tard le statut devrait devenir &quot;finalized&quot; en passant par des étapes intermédiaires. Pour vérifier cela vous pouvez faire un GET sur le jeu de données :</p>\n<pre><code class="language-sh">curl -v --header <span class="hljs-string">"x-apiKey: <span class="hljs-variable">$API_KEY</span>"</span> <span class="hljs-variable">$DATAFAIR_URL</span>/api/v1/datasets/<span class="hljs-variable">$DATASET_ID</span>\n</code></pre>\n<p>L\'attribut page est lui aussi intéressant, il vous permet de naviguer dans un navigateur directement sur la page de description du jeu de données. Pour connaître l\'étendue des capacités de requêtage sur ce jeu de données vous pouvez vous rendre sur l\'onglet API depuis cette page. Voici un exemple basique :</p>\n<pre><code class="language-sh">curl -v --header <span class="hljs-string">"x-apiKey: <span class="hljs-variable">$API_KEY</span>"</span> <span class="hljs-variable">$DATAFAIR_URL</span>/api/v1/datasets/<span class="hljs-variable">$DATASET_ID</span>/lines\n</code></pre>\n<h3>Jeu de données basé fichier avec pièces jointes</h3>\n<p>Téléchargez un fichier CSV d\'exemple qui contient une colonne de chemins vers des pièces jointes :</p>\n<pre><code class="language-sh">curl https://raw.githubusercontent.com/koumoul-dev/data-fair/master/<span class="hljs-built_in">test</span>/resources/dataset-attachments.csv -o dataset-attachments.csv\n</code></pre>\n<p>Téléchargez l\'archive contenant les pièces jointes correspondantes :</p>\n<pre><code class="language-sh">curl https://raw.githubusercontent.com/koumoul-dev/data-fair/master/<span class="hljs-built_in">test</span>/resources/files.zip -o files.zip\n</code></pre>\n<p>Créez un jeu de données basé sur le CSV et enrichi avec les pièces jointes de l\'archive grâce à cette requête HTTP multipart :</p>\n<pre><code class="language-sh">curl -v --header <span class="hljs-string">"x-apiKey: <span class="hljs-variable">$API_KEY</span>"</span> --form file=@dataset-attachments.csv --form attachments=@files.zip <span class="hljs-variable">$DATAFAIR_URL</span>/api/v1/datasets\n<span class="hljs-built_in">export</span> DATASET_ID=identifiant que vous venez de recevoir\n</code></pre>\n<p>Si vous visitez la page de ce jeu de données vous verrez un onglet &quot;Fichiers&quot; supplémentaire qui permet de lister les pièces jointes et d\'effectuer des recherches dans leur contenu. En effectuant une requête basique sur le jeu de données vous pouvez constater l\'ajout de champs _file.* qui sont issus de l\'analyse du contenu des pièces jointes.</p>\n<h3>Jeu de données incrémental</h3>\n<p>Créez un jeu de données incrémental vide avec un schéma minimaliste. Notez l\'attribut &quot;isRest&quot; qui est la condition pour créer ce type de jeu de données :</p>\n<pre><code class="language-sh">curl -v --header <span class="hljs-string">"x-apiKey: <span class="hljs-variable">$API_KEY</span>"</span> --header <span class="hljs-string">"Content-Type: application/json"</span> <span class="hljs-variable">$DATAFAIR_URL</span>/api/v1/datasets --data <span class="hljs-string">\'{\n  "isRest": true,\n  "title": "rest1",\n  "schema": [{ "key": "attr1", "type": "string" }, { "key": "attr2", "type": "string" }]\n}\'</span>\n<span class="hljs-built_in">export</span> DATASET_ID=identifiant que vous venez de recevoir\n</code></pre>\n<p>Ajouter une ligne de donnée :</p>\n<pre><code class="language-sh">curl -v --header <span class="hljs-string">"x-apiKey: <span class="hljs-variable">$API_KEY</span>"</span> --header <span class="hljs-string">"Content-Type: application/json"</span> <span class="hljs-variable">$DATAFAIR_URL</span>/api/v1/datasets/<span class="hljs-variable">$DATASET_ID</span>/lines --data <span class="hljs-string">\'{\n  "_id": "ligne1",\n  "attr1": "attr1 ligne1",\n  "attr2": "attr2 ligne1"\n}\'</span>\n</code></pre>\n<p>Ajoutez/modifiez plusieurs lignes de donnée :</p>\n<pre><code class="language-sh">curl -v --header <span class="hljs-string">"x-apiKey: <span class="hljs-variable">$API_KEY</span>"</span> --header <span class="hljs-string">"Content-Type: application/json"</span> <span class="hljs-variable">$DATAFAIR_URL</span>/api/v1/datasets/<span class="hljs-variable">$DATASET_ID</span>/_bulk_lines --data <span class="hljs-string">\'[\n  { "_id": "ligne1", "_action": "patch", "attr1": "attr1 ligne1 autre valeur"},\n  { "_id": "ligne2", "attr1": "attr1 ligne2", "attr2": "attr2 ligne2"}\n]\'</span>\n</code></pre>\n<p>Vérifiez la donnée :</p>\n<pre><code class="language-sh">curl -v --header <span class="hljs-string">"x-apiKey: <span class="hljs-variable">$API_KEY</span>"</span> <span class="hljs-variable">$DATAFAIR_URL</span>/api/v1/datasets/<span class="hljs-variable">$DATASET_ID</span>/lines\n</code></pre>\n<h3>Jeu de données incrémental avec pièces jointes</h3>\n<p>Créez un jeu de données incrémental vide avec un schéma qui contient un champ type <em>pièces jointes</em> :</p>\n<pre><code class="language-sh">curl -v --header <span class="hljs-string">"x-apiKey: <span class="hljs-variable">$API_KEY</span>"</span> --header <span class="hljs-string">"Content-Type: application/json"</span> <span class="hljs-variable">$DATAFAIR_URL</span>/api/v1/datasets --data <span class="hljs-string">\'{\n  "isRest": true,\n  "title": "rest1",\n  "schema": [\n    { "key": "attr1", "type": "string" },\n    { "key": "attachmentPath", "type": "string", "x-refersTo": "http://schema.org/DigitalDocument" }\n  ]\n}\'</span>\n<span class="hljs-built_in">export</span> DATASET_ID=identifiant que vous venez de recevoir\n</code></pre>\n<p>Ajoutez plusieurs lignes de données avec pièces jointes dans une archive :</p>\n<pre><code class="language-sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">\'[\n  { "_id": "line1", "attr1": "test1", "attachmentPath": "test.odt" },\n  { "_id": "line2", "attr1": "test1", "attachmentPath": "dir1/test.pdf" }\n]\'</span> &gt; actions.json\ncurl -v --header <span class="hljs-string">"x-apiKey: <span class="hljs-variable">$API_KEY</span>"</span> <span class="hljs-variable">$DATAFAIR_URL</span>/api/v1/datasets/<span class="hljs-variable">$DATASET_ID</span>/_bulk_lines --form attachments=@files.zip --form actions=@actions.json\n</code></pre>\n<p>Vérifiez la donnée :</p>\n<pre><code class="language-sh">curl -v --header <span class="hljs-string">"x-apiKey: <span class="hljs-variable">$API_KEY</span>"</span> <span class="hljs-variable">$DATAFAIR_URL</span>/api/v1/datasets/<span class="hljs-variable">$DATASET_ID</span>/lines\n</code></pre>\n</section>\n'},168:function(e,s){e.exports="<section><p>TODO</p>\n</section>\n"},169:function(e,s){e.exports="<section><p>N'importe qui peut développer une nouvelle application compatible. Les applications elles aussi sont mises à disposition sous forme de services : ce sont des applications Web disponibles en ligne. Une instance de Data FAIR fait office de proxy vers les applications configurées et les réexpose en leur communiquant les informations de contexte nécessaires à l'intéropérabilité. Pour pouvoir être intégrée dans une instance Data FAIR, une application doit exposer certaines informations.</p>\n<h3>Exemples</h3>\n<ul>\n<li>Une application statique développée avec des frameworks modernes : <a href=\"https://github.com/koumoul-dev/data-fair-charts\">data-fair-charts</a></li>\n<li>Une application statique minimaliste en HTML/JS/CSS pur avec juste un petit peu de jQuery : <a href=\"https://github.com/koumoul-dev/data-fair-minimal\">data-fair-minimal</a></li>\n</ul>\n<h3>Métadonnées essentielles</h3>\n<p>Une application expose un fichier HTML, typiquement un fichier <code>ìndex.html</code> à sa racine. Ce fichier doit contenir certaines informations, renseignées dans des balises de la section HEAD :</p>\n<ul>\n<li><strong>tittle</strong> : Le titre de l'application, dans une balise title.</li>\n<li><strong>description</strong> : La description de l'application, dans une balise meta.</li>\n</ul>\n<h3>Gestion des configurations</h3>\n<p>Une application doit donner à Data FAIR le moyen de créer et éditer des configurations cohérentes avec ses besoins. Pour cela nous proposons deux méthodes. Dans la mesure du possible nous recommandons la première.</p>\n<p>La première méthode est de servir à la racine de l'application un fichier config-schema.json. Ce fichier est un schéma JSON qui décrit le format de configuration attendu. Ce schéma peut être enrichi d'annotations qui vont permettre à Data FAIR de créer automatiquement un formulaire avec la librairie <a href=\"https://github.com/koumoul-dev/vuetify-jsonschema-form\">vuetify-jsonschema-form</a>. C'est la méthode utilisée par nos applications exemples.</p>\n<p>La deuxième méthode est d'exposer une page Web au chemin /config de l'application. Cette page sera intégrée en iFrame dans Data FAIR.</p>\n<h3>Informations de contexte</h3>\n<h4>Côté client</h4>\n<p>Par simplicité nous privilégions des applications statiques déployables sur un simple serveur Web comme nos applications exemples. Pour ces applications nous avons prévu un mécanisme simple de transmission des informations contextuelles.</p>\n<p>Le proxy Data FAIR cherche dans le contenu HTML qui transite la chaîne de caractère %APPLICATION% et la remplace par la configuration d'application complète au format JSON. Le code Javascript peut donc récupérer cet objet et l'utiliser pour effectuer un rendu adapté et consommer l'API de Data FAIR en conséquence.</p>\n<h4>Côté serveur</h4>\n<p>Il est aussi possible de développer une application avec rendu côté serveur. Dans ce cas le mode de transmission des informations contextuelles est différent.</p>\n<p>Ces informations sont transmises à l'aide de headers HTTP que le serveur de l'application interprète. Les headers suivant sont transmis par le service :</p>\n<ul>\n<li><strong>X-Exposed-Url</strong> : URL d'exposition de l'application</li>\n<li><strong>X-Application-Url</strong> : URL à utiliser pour connaître le propriétaire de l'application, les droits de l'utilisateur courant (pour par exemple masquer / afficher un bouton de configuration). En rajoutant <em>/config</em> au bout de cette URL, on peut enregistrer / lire la configuration de l'application</li>\n<li><strong>X-API-Url</strong> : URL de l'API de ce service, ce qui permet ensuite d'accéder aux services distants et aux datasets</li>\n</ul>\n</section>\n"},170:function(e,s){e.exports="<section><p>TODO</p>\n</section>\n"},171:function(e,s){e.exports='<section><p>Une API peut être utlisée par ce service si elle respecte certains critères. Elle doit être décrite avec un certain formalisme : spécification OpenAPI 3.0, annotations sémantiques particulières et mécanisme d\'identification de l\'API.</p>\n<h3>Spécification OpenAPI 3.0</h3>\n<p>Le schéma utilisé pour décrire une API est celui de la <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md">spécification OpenAPI 3.0</a>. Le format à utiliser est JSON (YAML sera supporté prochainement). Les autres formats ne sont pas supportés, en particulier le format Swagger 2.0. Si votre API est décrite dans un autre format, <a href="https://github.com/Mermade/awesome-openapi3">certains outils</a> permettent de la convertir dans le format OpenAPI 3.0.</p>\n<p>Néamoins, une description en pur OpenAPI 3.0 est insuffisante et il faut renseigner des informations complémentaires, notamment pour identifier l\'API plus facilement et la sémantiser. Ces informations sont ajoutées en utilisant le format d\'extensions autorisé par la spécification est les attributs supplémentaires sont de la forme <em>x-PropertyName</em>.</p>\n<h3>Identification de l\'API</h3>\n<p>La spécification OpenAPI 3.0 n\'offre pas de mécanisme permettant d\'identifier de manière unique un API. Cela pose différents problèmes :</p>\n<ul>\n<li>Il est difficile de suivre l\'évolution de l\'API, on ne sait pas si 2 descriptions similaires correspondent à 2 APIs différentes ou a 2 versions différentes d\'une même API.</li>\n<li>Certaines applications nécessitent des fonctionnalités particulières d\'API qu\'il est difficile de décrire sémantiquement. Une identification unique de l\'API permet au moins de dire que les applications ont besoin de cette API (et plus précisément d\'une version minimale) en particulier.</li>\n</ul>\n<p>Pour identifier de manière unique une API, nous avons choisi d\'adopter <a href="https://github.com/zalando/restful-api-guidelines/blob/master/chapters/compatibility.adoc">ces recommandations</a> : il faut renseigner un attribut <code>x-api-id</code> dans le bloc <code>ìnfo</code>. Plus précisément, il doit avoir cette forme :</p>\n<pre><code class="language-yaml"><span class="hljs-string">/info/x-api-id:</span>\n<span class="hljs-attr">  type:</span> <span class="hljs-string">string</span>\n<span class="hljs-attr">  format:</span> <span class="hljs-string">urn</span>\n<span class="hljs-attr">  pattern:</span> <span class="hljs-string">^[a-z0-9][a-z0-9-:.]{6,62}[a-z0-9]$</span>\n<span class="hljs-attr">  description:</span> <span class="hljs-string">|\n    Globally unique and immutable ID required to identify the API. The API\n    identifier allows to reveal the history and evolution of an API as a\n    sequence of API specifications. It enables validation tools to detect\n    incompatible changes and incorrect semantic versions.\n</span></code></pre>\n<h3>Annotations sémantiques</h3>\n<p>Les annotations sémantiques permettent de préciser ce que font les différentes opérations d\'une API. On peut d\'une part typer plus précisément les données en entrée et en sortie en utilisant des ontologies (par exemple un code postal est plus précis qu\'un entier) et d\'autre part déterminer une plus grande diversité d\'actions que les verbes HTTP qui sont très restreints.</p>\n<p>Le format d\'annotations sémantiques que nous avons choisi est décrit dans <a href="http://www.intelligence.tuc.gr/~petrakis/publications/SOAS4.pdf">cet article</a>. <em>x-operationType</em> permet de spécifier plus précisément l\'action réalisée par l\'opération. Nous conseillons d\'utiliser le vocabulaire <a href="http://schema.org/Action">défini ici</a> dans les types spécifiques. Pour pouvoir être utilisé pour de l\'enrichissement, un endpoint doit utiliser l\'action <em>Search</em>. <em>x-refersTo</em> permet de typer les entrées et sorties avec des ontologies. Le vocabulaire à utiliser est décrit dans ce projet, dans le fichier <code>contract/vocabulary.json</code>.</p>\n</section>\n'},195:function(e,s,n){"use strict";n.r(s);var a=n(144),t=n(165),i={components:{DocPage:a.a},data:function(){return{pages:["applications","services","api"]}},head:function(){return{meta:[{hid:"robots",name:"robots",content:"index"}]}},computed:{content:function(){if(this.$route){var e=t("./".concat(this.$route.params.id,"-").concat(this.$i18n.locale,".md"))||t("./".concat(this.$route.params.id,"-fr.md"));return e}}}},r=n(16),o=Object(r.a)(i,function(){var e=this.$createElement;return(this._self._c||e)("doc-page",{attrs:{page:this.$route.params.id,pages:this.pages,content:this.content,prefix:"interoperate"}})},[],!1,null,null,null);o.options.__file="_id.vue";s.default=o.exports}}]);